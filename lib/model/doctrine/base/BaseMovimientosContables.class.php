<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MovimientosContables', 'doctrine');

/**
 * BaseMovimientosContables
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $codigo_cuenta
 * @property string $nombre_cuenta
 * @property integer $proyecto
 * @property string $numero_comprobante
 * @property date $fecha
 * @property string $mes
 * @property string $anho
 * @property string $glosa
 * @property decimal $dolares
 * @property decimal $pesos
 * @property integer $id_tipo_cuenta
 * 
 * @method integer              getId()                 Returns the current record's "id" value
 * @method string               getCodigoCuenta()       Returns the current record's "codigo_cuenta" value
 * @method string               getNombreCuenta()       Returns the current record's "nombre_cuenta" value
 * @method integer              getProyecto()           Returns the current record's "proyecto" value
 * @method string               getNumeroComprobante()  Returns the current record's "numero_comprobante" value
 * @method date                 getFecha()              Returns the current record's "fecha" value
 * @method string               getMes()                Returns the current record's "mes" value
 * @method string               getAnho()               Returns the current record's "anho" value
 * @method string               getGlosa()              Returns the current record's "glosa" value
 * @method decimal              getDolares()            Returns the current record's "dolares" value
 * @method decimal              getPesos()              Returns the current record's "pesos" value
 * @method integer              getIdTipoCuenta()       Returns the current record's "id_tipo_cuenta" value
 * @method MovimientosContables setId()                 Sets the current record's "id" value
 * @method MovimientosContables setCodigoCuenta()       Sets the current record's "codigo_cuenta" value
 * @method MovimientosContables setNombreCuenta()       Sets the current record's "nombre_cuenta" value
 * @method MovimientosContables setProyecto()           Sets the current record's "proyecto" value
 * @method MovimientosContables setNumeroComprobante()  Sets the current record's "numero_comprobante" value
 * @method MovimientosContables setFecha()              Sets the current record's "fecha" value
 * @method MovimientosContables setMes()                Sets the current record's "mes" value
 * @method MovimientosContables setAnho()               Sets the current record's "anho" value
 * @method MovimientosContables setGlosa()              Sets the current record's "glosa" value
 * @method MovimientosContables setDolares()            Sets the current record's "dolares" value
 * @method MovimientosContables setPesos()              Sets the current record's "pesos" value
 * @method MovimientosContables setIdTipoCuenta()       Sets the current record's "id_tipo_cuenta" value
 * 
 * @package    sigpro
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMovimientosContables extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('movimientos_contables');
        $this->hasColumn('id', 'integer', 3, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 3,
             ));
        $this->hasColumn('codigo_cuenta', 'string', 60, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('nombre_cuenta', 'string', 150, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('proyecto', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('numero_comprobante', 'string', 15, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 15,
             ));
        $this->hasColumn('fecha', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('mes', 'string', 2, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('anho', 'string', 4, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('glosa', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('dolares', 'decimal', 19, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 19,
             'scale' => '4',
             ));
        $this->hasColumn('pesos', 'decimal', 19, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 19,
             'scale' => '4',
             ));
        $this->hasColumn('id_tipo_cuenta', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}